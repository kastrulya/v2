<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>Варіант 1. Дана мережа автомобільних доріг, що з'єднують міста Львівської області. Знайти найкоротшу відстань від Львова до кожного міста області, якщо рухатись можна тільки по дорогах.


Варіант 2. Дана карта велосипедних доріжок Латвії та Білорусі. Знайти мінімальну відстань, яку треба проїхати, щоб дістатися від Риги до Бобруйська.


Варіант 3. Є план міста з нанесеними на нього місцями розміщення пожежних частин. Знайти найближчу до кожного дому пожежну станцію.</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>Найпростіша реалізація алгоритма Дейкстри потребує O(V^2) дій. У ній використовується масив відстаней та масив позначок. На початку алгоритму відстані заповнюються великим позитивним числом (більшим максимального можливого шляху в графі), а масив позначок заповнюється нулями. Потім відстань для початкової вершини вважається рівною нулю і запускається основний цикл.

На кожному кроці циклу ми шукаємо вершину з мінімальною відстанню і прапором рівним нулю. Потім ми встановлюємо в ній позначку 1 і перевіряємо всі сусідні з нею вершини. Якщо в ній відстань більша, ніж сума відстані до поточної вершини і довжини ребра, то зменшуємо його. Цикл завершується коли позначки всіх вершин стають рівними 1.
</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Нехай u — вершина, від якої шукаються відстані, V — множина вершин графа, di — відстань від вершини u до вершини i, , w(i, j) — вага «ребра» (i, j).

Алгоритм:
1. Множина вершин U, до яких відстань відома, встановлюється рівною {u}.

2. Якщо U=V, алгоритм завершено.

3. Потенційні відстані Di до вершин з V\U встановлюються нескінченними.

4. Для всіх ребер (i, j), де i∈U та j∈V\U, якщо Dj&gt;di+w(i, j), то Dj присвоюється di+w(i, j).

5. Шукається i∈V\U, при якому Di мінімальне.

6. Якщо Di дорівнює нескінченності, алгоритм завершено. В іншому випадку di присвоюється значення Di, U присвоюється U∪{i} і виконується перехід до кроку 2.</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>Нехай вершини графа G=(V; E); |V| = n пронумеровані від 1 до n.
Існує два варіанти значення d{i j}^{k};k (1;n):

Найкоротший шлях між i;j не проходить через вершину k, тоді d{i j}^{k}=d{i j}^{k-1}
Існує більш короткий шлях між i;j, що проходить через k, тоді він спочатку йде від i до k, а потім від k до j. У цьому випадку, очевидно, d{i j}^{k}=d{i k}^{k-1} + d{k j}^{k-1}
Таким чином, для знаходження значення функції досить вибрати мінімум з двох позначених значень.

Тоді рекурентна формула для d{i j}^k має вигляд:

d{i j}^0 — довжина ребра (i,;j)

d{i j}^{k} = min (d{i j}^{k-1}; d{i k}^{k-1} + d{k j}^{k-1})

Алгоритм Флойда-Воршелла послідовно обчислює всі значення d{i j}^{k}, для k від 1 до n. Отримані значення d{i j}^{n} є довжинами найкоротших шляхів між вершинами i; j.</value>
  </data>
  <data name="label10.Text" xml:space="preserve">
    <value>Три вкладені цикли містять операцію, яка виконується сталий час. Тобто алгоритм має кубічну складність, при цьому простим розширенням можна отримати також інформацію про найкоротші шляхи — крім відстані між двома вузлами записувати в матрицю ідентифікатор першого вузла в дорозі.</value>
  </data>
  <data name="label12.Text" xml:space="preserve">
    <value>Алгоритм Флойда-Воршелла — алгоритм динамічного програмування для знаходження найкоротших відстаней між усіма вершинами зваженого орієнтованого графа. Розроблений в 1962 році Робертом Флойдом і Стівеном Воршеллом.

Варіант 1. Дана мережа автомобільних доріг, що з'єднують міста Львівської області. Знайти найкоротшу відстань від Львова до кожного міста області, якщо рухатись можна тільки по дорогах.

Варіант 2. Дана карта велосипедних доріжок Латвії та Білорусі. Знайти мінімальну відстань, яку треба проїхати, щоб дістатися від Риги до Бобруйська.

Варіант 3. Є план міста з нанесеними на нього місцями розміщення пожежних частин. Знайти найближчу до кожного дому пожежну станцію.</value>
  </data>
  <data name="label18.Text" xml:space="preserve">
    <value>Якщо граф заданий списком ребер: ініціалізація потребує  O(V) часу, кожен з  |V| - 1  
проходів потребує  O(E) часу, прохід по усім ребрам для перевірки наявності негативного
 циклу займає  O(E) часу. Отже алгоритм працює за  O(VE) часу.

Якщо граф заданий матрицею суміжності, то алгоритм буде виконуватись за  O(E^3) часу.</value>
  </data>
  <data name="label15.Text" xml:space="preserve">
    <value>Сам алгоритм Форда-Беллмана представляє з себе кілька фаз. 
На кожній фазі проглядаються всі ребра графа, і алгоритм намагається
 справити релаксацію (relax, ослаблення) уздовж кожного ребра  (a,b) ваги  c. 
Релаксація вздовж ребра - це спроба поліпшити значення  d [b] значенням  d[a]+c . 
 Стверджується, що достатньо  n-1  фази алгоритму, щоб коректно порахувати довжини всіх 
найкоротших шляхів у графі (цикли негативного ваги відсутні). Для недосяжних вершин
 відстань  d[ ]  залишиться рівним нескінченності.

 for (k = 0 \; .. \; n-2)
    for (v \in V)
       for (u : vu \; \in E)
          d[k+1][u] \gets \min(d[k + 1][u], \; d[k][v] + \omega(uv))</value>
  </data>
  <data name="label13.Text" xml:space="preserve">
    <value>Алгоритм Беллмана—Форда - алгоритм пошуку 
найкоротшого шляху в зваженому графі.
 Знаходить найкоротші шляхи від однієї вершини 
графа до всіх інших. Запропоновано незалежно Річардом
 Беллманом і Лестером Фордом.

Дано орієнтований або неорієнтований граф  G(V, E) зі зваженими 
ребрами. Довжиною шляху ( d[ ] ) назвемо суму ваг ребер, що входять 
в цей шлях. Вхідними даними для алгоритму є числа, список ребер, та 
номер стартовою вершини. Потрібно знайти найкоротші шляхи від 
початкової вершини до всіх вершин графа. Алгоритм Беллмана-Форда 
повертає логічне значення, яке вказує на те, чи міститься в графі цикл з 
негативною вагою, досяжний з витоку. </value>
  </data>
</root>